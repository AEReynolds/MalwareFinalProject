// Client
// Right click project -> build options -> linker settings -> add "libwsock32"
#define WIN32_LEAN_AND_MEAN

#include "Socket.h"
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <windows.h>

#define BUF_SIZE 500

int main(){
  // Initialize Winsock
    WSADATA wsaData;
    int iResult = WSAStartup(MAKEWORD(2, 2), &wsaData);
    if (iResult != NO_ERROR) {
        wprintf(L"WSAStartup function failed with error: %d\n", iResult);
        return 1;
    }
    //----------------------
    // Create a SOCKET for connecting to server
    SOCKET ConnectSocket;
    ConnectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (ConnectSocket == INVALID_SOCKET) {
        wprintf(L"socket function failed with error: %ld\n", WSAGetLastError());
        WSACleanup();
        return 1;
    }
    //----------------------
    // The sockaddr_in structure specifies the address family,
    // IP address, and port of the server to be connected to.
    sockaddr_in clientService;
    clientService.sin_family = AF_INET;
    clientService.sin_addr.s_addr = inet_addr("127.0.0.1");
    clientService.sin_port = htons(31000);

    //----------------------
    // Connect to server.
    iResult = connect(ConnectSocket, (SOCKADDR *) & clientService, sizeof (clientService));
    if (iResult == SOCKET_ERROR) {
        wprintf(L"connect function failed with error: %ld\n", WSAGetLastError());
        iResult = closesocket(ConnectSocket);
        if (iResult == SOCKET_ERROR)
            wprintf(L"closesocket function failed with error: %ld\n", WSAGetLastError());
        WSACleanup();
        return 1;
    }

    char recvBuffer[BUF_SIZE];
    char sendBuffer[BUF_SIZE];
    int errCode = 0;
    string userInput;

    wprintf(L"Connected to server.\n");
    printf("Accepting data from server\n");
    do {
        errCode = recv(ConnectSocket, recvBuffer, 500, 0);
        if (errCode > 0){
            printf("%s\n", recvBuffer);
        } else if (errCode == 0){
            printf("Connection closed...\n");
        } else {
            printf("Failed to receive data: %d\n", WSAGetLastError());
        }

        if(strcmp(recvBuffer,"7000 - Give me a command") == 0){
            printf("Send a command: ");
            getline(cin, userInput);
            send(ConnectSocket, userInput.c_str(), userInput.size(), 0);
        }

        memset(&recvBuffer, 0, sizeof(recvBuffer));
    }while (errCode > 0);

    wprintf(L"Closing socket connection.\n");
    iResult = closesocket(ConnectSocket);
    if (iResult == SOCKET_ERROR) {
        wprintf(L"closesocket function failed with error: %ld\n", WSAGetLastError());
        WSACleanup();
        return 1;
    }

    WSACleanup();
    return 0;
}
